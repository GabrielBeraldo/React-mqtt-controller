{"version":3,"sources":["pages/attic.js","App.js","index.js"],"names":["lightBulbicon","tempIcon","humIcon","topicsSub","topicsPub","mqtt","require","broker","options","port","clientId","Math","random","toString","substr","keepalive","reconnectPeriod","protocolId","protocolVersion","clean","encoding","client","connect","console","log","Attic","props","switchChanged","switchName","state","hasOwnProperty","switchVal","value","index","topicIndex","publish","content","setState","handleConnection","forEach","topic","subscribe","handleMessage","receivedTopic","message","handler","light1","light2","light3","values","JSON","parse","humContent","hum","tempContent","temp","parseFloat","Humidity","Temperature","createSwitch","className","src","id","text","type","checked","onClick","createDevices","rgb","on","this","Component","App","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.76a95c2a.chunk.js","sourcesContent":["import React, { Component } from 'react'\r\nimport './attic.css'\r\n\r\nvar lightBulbicon = [ \"https://image.flaticon.com/icons/svg/1527/1527680.svg\", \"https://image.flaticon.com/icons/svg/1527/1527681.svg\"];\r\nvar tempIcon =[\"https://image.flaticon.com/icons/svg/1113/1113742.svg\"];\r\nvar humIcon=[\"https://image.flaticon.com/icons/svg/1779/1779883.svg\"];\r\n\r\nvar topicsSub = ['attic/light1/status', 'attic/light2/status', 'attic/light3/status', 'attic/sensors'];\r\nvar topicsPub = ['attic/light1', 'attic/light2', 'attic/light3'];\r\n\r\n//////////////////////////////////////////////////////////////////////////////\r\n\r\nvar mqtt = require('mqtt');\r\nvar broker = 'mqtt://homeassist.local';\r\nvar options = {\r\n    port:1884,\r\n    clientId: 'nodecontroller_' + Math.random().toString(16).substr(2, 8),\r\n    keepalive: 60,\r\n    reconnectPeriod: 500,\r\n    protocolId: 'MQTT',\r\n    protocolVersion: 4,\r\n    clean: true,\r\n    encoding: 'utf8'\r\n}\r\n\r\nvar client= mqtt.connect(broker, options);\r\nconsole.log(\"Requesting connection to \" + broker);\r\n\r\n\r\n/////////////////////////////////////////////////////////////////////////////\r\n\r\nexport default class Attic extends Component{\r\n    constructor(props){\r\n        super(props);\r\n        this.state={\r\n            light1: {value: false, topicIndex: 0, text: \"Light 1\"},\r\n            light2: {value: false, topicIndex: 1, text: \"Light 2\"},\r\n            light3: {value: false, topicIndex: 2, text: \"Light 3\"},\r\n            temp:   {value: '--,-',  topicIndex: 3, text: \"Temperature\"},\r\n            hum:    {value: '--,-',  topicIndex: 3, text: \"humidity\"},\r\n            rgb:    {value: {\"red\": 0, \"green\": 0, \"blue\": 0}, topicIndex: 4, text: \"rgb\"}\r\n        }\r\n    }\r\n\r\n    switchChanged = (switchName) => {\r\n        if(!this.state.hasOwnProperty(switchName)) return false;\r\n\r\n        let switchVal = this.state[switchName].value;\r\n        let index = this.state[switchName].topicIndex;\r\n\r\n        client.publish(topicsPub[index], (switchVal ? 'off': 'on'));\r\n        \r\n        let content = this.state[switchName];\r\n        content.value = !content.value;\r\n\r\n        this.setState({[switchName]: content});\r\n    }\r\n\r\n    handleConnection = () =>{\r\n        topicsSub.forEach(topic=>{\r\n            client.subscribe(topic);\r\n            console.log(\"subscribed to: \" + topic)\r\n        })\r\n    }\r\n\r\n    handleMessage = (receivedTopic, message) =>{\r\n        //console.log(\"topic: \"+ receivedTopic.toString() + \" received: \"+ message.toString());\r\n        const topicHandler={\r\n            'attic/light1/status':(message)=>{\r\n                let state = (message == 'on') ? true : false;\r\n                let content = this.state['light1'];\r\n                content.value = state;\r\n\r\n                this.setState({light1: content});\r\n            },\r\n            'attic/light2/status':(message)=>{\r\n                let state = (message == 'on')? true : false;\r\n                let content = this.state['light2'];\r\n                content.value = state;\r\n\r\n                this.setState({light2: content});\r\n            },\r\n            'attic/light3/status':(message)=>{\r\n                let state = (message == 'on')? true : false;\r\n                let content = this.state['light3'];\r\n                content.value = state;\r\n\r\n                this.setState({light3: content});\r\n            },\r\n            'attic/sensors':(message)=>{\r\n                let values = JSON.parse(message);\r\n\r\n                let humContent = this.state.hum;\r\n                let tempContent =this.state.temp;\r\n\r\n                humContent.value = parseFloat(values.Humidity);\r\n                tempContent.value = parseFloat(values.Temperature);\r\n\r\n                this.setState({\r\n                    hum:humContent,\r\n                    temp: tempContent\r\n                })\r\n            }\r\n        }\r\n\r\n        const handler = topicHandler[receivedTopic];\r\n        if(handler){\r\n            handler(message);\r\n            console.log(this.state);\r\n        }\r\n    }\r\n\r\n    componentDidMount(){\r\n        client.on('connect', ()=>{this.handleConnection()});\r\n        client.on('message', (receivedTopic, message)=>{this.handleMessage(receivedTopic, message)});\r\n    }\r\n\r\n    createSwitch = (switchName) =>{\r\n        return(\r\n            <div className = \"device\">\r\n                <label className=\"device-label\">\r\n                    <img \r\n                        src={this.state[switchName].value?lightBulbicon[1]:lightBulbicon[0]} \r\n                        className = \"device-icon\" \r\n                        id=\"light1-icon\" \r\n                    />\r\n                    <strong className = \"device-text\">{this.state[switchName].text}</strong>\r\n                </label>\r\n                \r\n                <label className=\"switch\" >\r\n                    <input \r\n                        type=\"checkbox\" \r\n                        id=\"switch1\" \r\n                        checked={this.state[switchName].value}\r\n                        onClick={() => {this.switchChanged(switchName)}}/>\r\n                    <span className=\"slider round\"></span>\r\n                </label>\r\n            </div> \r\n        )\r\n    }\r\n\r\n    createDevices = () =>{\r\n        return(\r\n            <div className = \"devices-container\">\r\n                    \r\n                {this.createSwitch('light1')}\r\n                {this.createSwitch('light2')}\r\n                {this.createSwitch('light3')}\r\n\r\n                <div className = \"device\">\r\n                    <label className=\"device-label\">\r\n                        <img src={tempIcon} className = \"device-icon\" id=\"temp-icon\" />\r\n                        <strong className = \"device-text\">Temperature </strong>\r\n                    </label>\r\n                    <label className=\"temp-label\" id=\"temp-value\" >\r\n                        {this.state.temp.value.toString() + \"Â°C\"}\r\n                    </label>\r\n                </div>\r\n                \r\n                \r\n                <div className = \"device\">\r\n                    <label className=\"device-label\">\r\n                        <img src={humIcon} className = \"device-icon\" id=\"hum-icon\" />\r\n                        <strong className = \"device-text\">Humidity </strong>\r\n                    </label>\r\n                    <label className=\"hum-label\" id=\"hum-value\" >\r\n                        {this.state.hum.value.toString() + \"%\"}\r\n                    </label>\r\n                </div>\r\n                \r\n            </div>\r\n        )\r\n    }\r\n\r\n    render(){\r\n        return(\r\n            <div className = \"main-container\">       \r\n                {this.createDevices()}\r\n            </div>\r\n        );\r\n    }\r\n}","import React from 'react';\r\n\r\nimport Attic from './pages/attic';\r\n\r\nfunction App() {\r\n  return (\r\n    <Attic />\r\n  );\r\n}\r\n\r\nexport default App;","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\n\r\nReactDOM.render(<App />, document.getElementById('root'));\r\n\r\n"],"sourceRoot":""}